//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/PlayerWorldInteractionControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerWorldInteractionControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerWorldInteractionControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerWorldInteractionControls"",
    ""maps"": [
        {
            ""name"": ""PlayerWorldInteractions"",
            ""id"": ""04d46a0c-95fc-4804-a5ec-7cfb277a9508"",
            ""actions"": [
                {
                    ""name"": ""WorldClick"",
                    ""type"": ""Button"",
                    ""id"": ""91011da5-b733-489b-8bb5-289e1100b672"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""1de5cead-e68c-4f23-8a17-237afd41e4da"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""79e46869-7498-4196-b39a-ef237e3ef604"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WorldClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1f0639e-0217-4485-a370-8807e9ac1e77"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WorldClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a559e49-16a0-4c07-b02d-aee871ab08e3"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WorldClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4df694a6-e46b-4813-9fd1-d6b546280a1e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""852a4d75-7e6b-491a-968a-5cbecd1d1a64"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": ""Tap,Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerWorldInteractions
        m_PlayerWorldInteractions = asset.FindActionMap("PlayerWorldInteractions", throwIfNotFound: true);
        m_PlayerWorldInteractions_WorldClick = m_PlayerWorldInteractions.FindAction("WorldClick", throwIfNotFound: true);
        m_PlayerWorldInteractions_MousePosition = m_PlayerWorldInteractions.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerWorldInteractions
    private readonly InputActionMap m_PlayerWorldInteractions;
    private IPlayerWorldInteractionsActions m_PlayerWorldInteractionsActionsCallbackInterface;
    private readonly InputAction m_PlayerWorldInteractions_WorldClick;
    private readonly InputAction m_PlayerWorldInteractions_MousePosition;
    public struct PlayerWorldInteractionsActions
    {
        private @PlayerWorldInteractionControls m_Wrapper;
        public PlayerWorldInteractionsActions(@PlayerWorldInteractionControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @WorldClick => m_Wrapper.m_PlayerWorldInteractions_WorldClick;
        public InputAction @MousePosition => m_Wrapper.m_PlayerWorldInteractions_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_PlayerWorldInteractions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerWorldInteractionsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerWorldInteractionsActions instance)
        {
            if (m_Wrapper.m_PlayerWorldInteractionsActionsCallbackInterface != null)
            {
                @WorldClick.started -= m_Wrapper.m_PlayerWorldInteractionsActionsCallbackInterface.OnWorldClick;
                @WorldClick.performed -= m_Wrapper.m_PlayerWorldInteractionsActionsCallbackInterface.OnWorldClick;
                @WorldClick.canceled -= m_Wrapper.m_PlayerWorldInteractionsActionsCallbackInterface.OnWorldClick;
                @MousePosition.started -= m_Wrapper.m_PlayerWorldInteractionsActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_PlayerWorldInteractionsActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_PlayerWorldInteractionsActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_PlayerWorldInteractionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @WorldClick.started += instance.OnWorldClick;
                @WorldClick.performed += instance.OnWorldClick;
                @WorldClick.canceled += instance.OnWorldClick;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public PlayerWorldInteractionsActions @PlayerWorldInteractions => new PlayerWorldInteractionsActions(this);
    public interface IPlayerWorldInteractionsActions
    {
        void OnWorldClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
